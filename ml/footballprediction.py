# -*- coding: utf-8 -*-
"""FootballPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tnlRSCSe8riF8X2NOGAjk5sYah5fHD6f
"""

# import các thư viện cơ bản
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

"""### Đọc dữ liệu"""

df0 = pd.read_csv('PL.csv')
df1 = pd.read_csv('LL.csv')
df2 = pd.read_csv('B.csv')
df3= pd.read_csv('S.csv')
df4 = pd.read_csv('L1.csv')

"""Tạo cột giải đấu"""

df0["League"] = 'Premier League'
df1["League"] = 'La liga'
df2["League"] = 'Bundesliga'
df3["League"] = 'Serie A'
df4["League"] = 'Ligue 1'

df0["LeagueCode"] = 1
df1["LeagueCode"] = 2
df2["LeagueCode"] = 3
df3["LeagueCode"] = 4
df4["LeagueCode"] = 5

print(f"Số trận đấu Premier League: {df0.shape[0]}")
print(f"Số trận đấu Laliga: {df1.shape[0]}")
print(f"Số trận đấu Bundesliga: {df2.shape[0]}")
print(f"Số trận đấu Serie A: {df3.shape[0]}")
print(f"Số trận đấu Ligue 1: {df4.shape[0]}")

"""Kiểm tra loại bỏ dữ liệu thiếu"""

for df in [df0, df1, df2, df3, df4]:
    missing_rows = df[df.isnull().any(axis=1)]
    print(f"Số dòng bị thiếu dữ liệu: {len(missing_rows)}")
    missing_rows[['Date','Div','HomeTeam','AwayTeam',]].head()

df0 = df0.dropna().reset_index(drop=True)
df1 = df1.dropna().reset_index(drop=True)
df2 = df2.dropna().reset_index(drop=True)
df3 = df3.dropna().reset_index(drop=True)
df4 = df4.dropna().reset_index(drop=True)

"""Định dạng ngày tháng  về dạng 2014-08-30"""

from dateutil import parser

df0['Date'] = df0['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
df1['Date'] = df1['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
df2['Date'] = df2['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
df3['Date'] = df3['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
df4['Date'] = df4['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)

for df in [df0, df1, df2, df3, df4]:
    # Kiểm tra dòng nào bị lỗi khi chuyển ngày
    invalid_dates = df[df['Date'].isnull()]
    print(f'Số dòng lỗi định dạng ngày: {len(invalid_dates)}')

df0 = df0.sort_values(by='Date').reset_index(drop=True)
df1 = df1.sort_values(by='Date').reset_index(drop=True)
df2 = df2.sort_values(by='Date').reset_index(drop=True)
df3 = df3.sort_values(by='Date').reset_index(drop=True)
df4 = df4.sort_values(by='Date').reset_index(drop=True)

df0.duplicated(subset = ['Date', 'HomeTeam', 'AwayTeam']).sum()
df1.duplicated(subset = ['Date', 'HomeTeam', 'AwayTeam']).sum()
df2.duplicated(subset = ['Date', 'HomeTeam', 'AwayTeam']).sum()
df3.duplicated(subset = ['Date', 'HomeTeam', 'AwayTeam']).sum()
df4.duplicated(subset = ['Date', 'HomeTeam', 'AwayTeam']).sum()

dfs = [df0, df1, df2, df3, df4]
names = ["Premier League", "La Liga", "Bundesliga", "Serie A", "Ligue 1"]

for name, df in zip(names, dfs):
    print(f"\n {name} - Thống kê kết quả FTR:")
    counts = df['FTR'].value_counts()
    total = counts.sum()
    for result in ['H', 'D', 'A']:
        pct = counts.get(result, 0) / total * 100
        print(f"{result}: {counts.get(result, 0)} trận ({pct:.2f}%)")

#Mã hóa cột kết quả trận đấu
df0["FTR"] = df0["FTR"].map({"H": 0, "D": 1, "A": 2})
df1["FTR"] = df1["FTR"].map({"H": 0, "D": 1, "A": 2})
df2["FTR"] = df2["FTR"].map({"H": 0, "D": 1, "A": 2})
df3["FTR"] = df3["FTR"].map({"H": 0, "D": 1, "A": 2})
df4["FTR"] = df4["FTR"].map({"H": 0, "D": 1, "A": 2})

"""### Tính đặc trưng


"""

def createID(df):
    df["MatchOrder"] = df.sort_values("Date").groupby(["Season", "Div"]).cumcount() + 1
    df["MatchID"] =  df["Div"].astype(str) + "_" + df["Season"].astype(str) + "_" + df["MatchOrder"].astype(str)
    return df

df0 = createID(df0)
df1 = createID(df1)
df2 = createID(df2)
df3 = createID(df3)
df4 = createID(df4)

df1

"""Tách riêng đội khách và đội nhà trong trên 1 dòng ra và gáng thông số tương ứng để tính trung bình cho từng đội theo từng trận"""

def features(df):
    df = df.copy()

    home = df[[ "MatchID", "Date", "HomeTeam",  "Season","FTHG", "FTAG", "HS", "HST","HC", "HF","HY","HR"]].copy()
    home.columns = ["ID", "Date", "Team" ,"Season", "GF", "GA", "Sh", "ShT","Cn","F","YC","RC"]

    home["Point"] = df["FTR"].map({0: 3, 1: 1, 2: 0})

    home["Conv_rate"] = np.where(home["Sh"] == 0, 0, home["GF"] / home["Sh"])
    home["ShT_ratio"] = np.where(home["Sh"] == 0, 0, home["ShT"] / home["Sh"])

    home["Win"] = df["FTR"].map({0: 1, 1: 0, 2: 0})
    home["Draw"] = df["FTR"].map({0: 0, 1: 1, 2: 0})
    home["Lose"] = df["FTR"].map({0: 0, 1: 0, 2: 1})
    home["is_home"] = 1

    away = df[[ "MatchID","Date", "AwayTeam", "Season","FTAG", "FTHG", "AS","AST","AC", "AF","AY","AR"]].copy()
    away.columns = [ "ID","Date", "Team", "Season","GF", "GA","Sh", "ShT" ,"Cn", "F","YC","RC"]

    away["Point"] = df["FTR"].map({0: 0, 1: 1, 2: 3})

    away["Conv_rate"] = np.where(away["Sh"] == 0, 0, away["GF"] / away["Sh"])
    away["ShT_ratio"] = np.where(away["Sh"] == 0, 0, away["ShT"] / away["Sh"])
    away["Win"] = df["FTR"].map({0: 0, 1: 0, 2: 1})

    away["Draw"] = df["FTR"].map({0: 0, 1: 1, 2: 0})
    away["Lose"] = df["FTR"].map({0: 1, 1: 0, 2: 0})
    away["is_home"] = 0

    team_matches = pd.concat([home, away], ignore_index=True)
    team_matches = team_matches.sort_values(["Date","ID", "is_home"]).reset_index(drop=True)
    return team_matches

"""Tính trung bình phong độ 7 trận gần đây"""

def rolling_averages(group, cols, new_cols, window_size=7):
    group = group.sort_values("Date").copy()

    rolling_stats = (
        group[cols].shift(0)
        .rolling(window=window_size, min_periods=1, closed='left')
        .mean()
        .fillna(0)
        .round(2)
    )
    group[new_cols] = rolling_stats
    return group

cols = ["GF", "GA", "Point", "Sh", "ShT",	"Conv_rate", "ShT_ratio" ,"Win", "Draw","Lose","Cn","F","YC","RC"]
new_cols = [f"{c}_avg" for c in cols]

def apply_rolling(team_matches):
    team_matches = team_matches.groupby(["Season", "Team"]).apply(rolling_averages, cols, new_cols=new_cols)
    return team_matches.reset_index(drop=True)

"""Chọn các đặc trưng muốn hợp vào dataset"""

selected_cols = ["ID","Date","Team",
                 "GF_avg", "GA_avg", "Point_avg",
                 "Sh_avg", "ShT_avg", "Conv_rate_avg", "ShT_ratio_avg",
                 "Cn_avg", "F_avg", "YC_avg", "RC_avg" ,
                 "Win_avg", "Draw_avg", "Lose_avg"]

def select_cols(team_matches):
    team_matches = team_matches[selected_cols]
    return team_matches

"""hợp lại với dataset"""

def merge_back(df, team_matches):
    df = df.merge(
        team_matches.rename(columns={
            "ID": "MatchID",
            "Team": "HomeTeam",
            "Date": "Date",
            "Point_avg": "Home_point_avg",
            "GF_avg": "Home_avg_gf",
            "GA_avg": "Home_avg_ga",
            "Sh_avg": "Home_avg_sh",
            "ShT_avg": "Home_avg_sht",
            "Cn_avg": "Home_avg_cn",
            "Conv_rate_avg": "Home_conv_rate_avg",
            "ShT_ratio_avg": "Home_shT_ratio_avg",
            "F_avg": "Home_F_avg",
            "YC_avg": "Home_YC_avg",
            "RC_avg": "Home_RC_avg",
            "Win_avg": "Home_win_avg",
            "Draw_avg": "Home_draw_avg",
            "Lose_avg": "Home_lose_avg"
        }),
        on=["MatchID", "HomeTeam"],
        how="left"
    )
    df = df.merge(
    team_matches.rename(columns={
        "ID": "MatchID",
        "Team": "AwayTeam",
        "Date": "Date",
        "Point_avg": "Away_point_avg",
        "GF_avg": "Away_avg_gf",
        "GA_avg": "Away_avg_ga",
        "Sh_avg": "Away_avg_sh",
        "ShT_avg": "Away_avg_sht",
        "Cn_avg": "Away_avg_cn",
        "Conv_rate_avg": "Away_conv_rate_avg",
        "ShT_ratio_avg": "Away_shT_ratio_avg",
        "F_avg": "Away_F_avg",
        "YC_avg": "Away_YC_avg",
        "RC_avg": "Away_RC_avg",
        "Win_avg": "Away_win_avg",
        "Draw_avg": "Away_draw_avg",
        "Lose_avg": "Away_lose_avg"
    }),
    on=["MatchID", "AwayTeam"],
    how="left"
    )
    df = df.sort_values("Date").reset_index(drop=True)
    return df

def generate_features(df):
    team_matches =  features(df)
    team_matches = apply_rolling(team_matches)
    team_matches = select_cols(team_matches)
    df = merge_back(df, team_matches)
    return df

EPL_DATA = df0
LaLiga_DATA = df1
Bundesliga_DATA = df2
SerieA_Data = df3
Ligue1_DATA = df4

EPL_DATA = generate_features(EPL_DATA)
  LaLiga_DATA = generate_features(LaLiga_DATA)
  Bundesliga_DATA = generate_features(Bundesliga_DATA)
  SerieA_Data = generate_features(SerieA_Data)
  Ligue1_DATA = generate_features(Ligue1_DATA)

EPL_DATA[((EPL_DATA["HomeTeam"]=="Liverpool") | (EPL_DATA["AwayTeam"]=="Liverpool"))  ].head(8)

LaLiga_DATA[(LaLiga_DATA["HomeTeam"]=="Barcelona") | (LaLiga_DATA["AwayTeam"]=="Barcelona")].head(8)

Ligue1_DATA[(Ligue1_DATA["HomeTeam"]=="Evian Thonon Gaillard") | (Ligue1_DATA["AwayTeam"]=="Evian Thonon Gaillard")].head(8)

Bundesliga_DATA[(Bundesliga_DATA["HomeTeam"]=="Bayern Munich") | (Bundesliga_DATA["AwayTeam"]=="Bayern Munich")].head(8)

SerieA_Data[(SerieA_Data["HomeTeam"]=="Juventus") | (SerieA_Data["AwayTeam"]=="Juventus")].head(8)

dfs = [EPL_DATA, LaLiga_DATA, Bundesliga_DATA, SerieA_Data, Ligue1_DATA]
name = ["Premier League", "La Liga", "Bundesliga", "Serie A", "Ligue 1"]

for i, df in enumerate(dfs):
    print(f"\n số lượng giá trị null trong {name[i]}")
    print(df.isnull().sum().sort_values(ascending=False))

rolling_cols = [col for col in EPL_DATA.columns if "_avg" in col]
EPL_DATA = EPL_DATA.dropna(subset=rolling_cols)

rolling_cols = [col for col in LaLiga_DATA.columns if "_avg" in col]
LaLiga_DATA = LaLiga_DATA.dropna(subset=rolling_cols)

rolling_cols = [col for col in Bundesliga_DATA.columns if "_avg" in col]
Bundesliga_DATA = Bundesliga_DATA.dropna(subset=rolling_cols)

rolling_cols = [col for col in SerieA_Data.columns if "_avg" in col]
SerieA_Data = SerieA_Data.dropna(subset=rolling_cols)

rolling_cols = [col for col in Ligue1_DATA.columns if "_avg" in col]
Ligue1_DATA = Ligue1_DATA.dropna(subset=rolling_cols)

def tinh_dac_trung(df):

    df = df.copy()
    # 1. Tổng quan sức mạnh
    df["diff_point"] = df["HomePoint"] - df["AwayPoint"]
    df["diff_rank"] = df["HomeRank"] - df["AwayRank"]

    df["diff_GD"] = df["HomeDiff"] - df["AwayDiff"]
    df["diff_GF"] = df["HomeGF"] - df["AwayGF"]
    df["diff_GA"] = df["HomeGA"] - df["AwayGA"]

    # 2. Phong độ gần đây
    df["diff_Form"] = df["Home_point_avg"] - df["Away_point_avg"]
    df["diff_Win"]  = df["Home_win_avg"] - df["Away_win_avg"]
    df["diff_Lose"] = df["Home_lose_avg"] - df["Away_lose_avg"]
    df["diff_Draw"] = df["Home_draw_avg"] - df["Away_draw_avg"]


    # 3. Tấn công – phòng ngự gần đây
    df["diff_gf"] = df["Home_avg_gf"] - df["Away_avg_gf"]
    df["diff_ga"] = df["Home_avg_ga"] - df["Away_avg_ga"]

    df["diff_cn"] = df["Home_avg_cn"] - df["Away_avg_cn"]

    df["diff_yc"] = df["Home_YC_avg"] - df["Away_YC_avg"]
    df["diff_f"] = df["Home_F_avg"] - df["Away_F_avg"]

    df["diff_rc"] = df["Home_RC_avg"] - df["Away_RC_avg"]

    df["diff_sh"] = df["Home_avg_sh"] - df["Away_avg_sh"]
    df["diff_sht"] = df["Home_avg_sht"] - df["Away_avg_sht"]

    df["draw_score"] = (
      (df["diff_rank"].abs() <= 6).astype(int) +
      (df["diff_point"].abs() <= 6).astype(int) +
      (df["diff_GD"].abs() <= 15).astype(int) +
      (df["diff_GA"].abs() <= 10).astype(int) +
      (df["diff_GF"].abs() <= 10).astype(int) +
      (df["diff_Form"].abs() <= 0.6).astype(int)+
      (df["diff_Win"].abs() <= 0.25).astype(int) +
      (df["diff_Lose"].abs() <= 0.25).astype(int) +
      (df["diff_gf"].abs() <=1.5).astype(int) +
      (df["diff_ga"].abs() <=1.5).astype(int) +
      (df["diff_sh"].abs() <= 4).astype(int) +
      (df["diff_sht"].abs() <= 2).astype(int)
    )/12


    return df

dt1 = None
dt2 = None
dt3 = None
dt4 = None
dt5 = None

dt1 = tinh_dac_trung(EPL_DATA)
  dt2 = tinh_dac_trung(LaLiga_DATA)
  dt3 = tinh_dac_trung(Bundesliga_DATA)
  dt4 = tinh_dac_trung(SerieA_Data)
  dt5 = tinh_dac_trung(Ligue1_DATA)

data = pd.concat([dt1, dt2, dt3, dt4, dt5], ignore_index=True)

"""Kiểm tra đặc trưng có phân biệt rõ ràng cho 3 lớp ko"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.boxplot(data, x="FTR", y="draw_score")

"""### Huấn luyện mô hình"""

features_df = data.copy()
features_df.head()

selected_features = [
    'LeagueCode',

    'HomeRank', 'AwayRank',
    'HomePoint', 'AwayPoint',
    'HomeDiff', 'AwayDiff',
    'HomeGF', 'AwayGF',
    'HomeGA', 'AwayGA',
    'diff_point','diff_rank',
    'diff_GD','diff_GF', 'diff_GA',

    'Home_point_avg', 'Away_point_avg',
    'Home_avg_gf', 'Away_avg_gf',
    'Home_avg_ga', 'Away_avg_ga',

    'Home_win_avg', 'Away_win_avg',
    'Home_lose_avg','Away_lose_avg',
    'Home_draw_avg','Away_draw_avg',

    'Home_avg_sh','Away_avg_sh',
    'Home_avg_sht','Away_avg_sht',
    'diff_Form',
    'diff_Win','diff_Draw','diff_Lose',
    'diff_gf','diff_ga',
    'diff_sh','diff_sht', 'draw_score'
]

# Đảm bảo Date là datetime
features_df["Date"] = pd.to_datetime(features_df["Date"])

# Chia theo thời gian thực tế28/05/2023 19/05/2024
train_df = features_df[features_df["Date"] < "2024-07-30"]

test_df  = features_df[features_df["Date"] > "2024-07-30"]

X_train = train_df[selected_features]
X_test  = test_df[selected_features]

y_train = (train_df["FTR"])
y_test  = (test_df["FTR"])

print("Train date range:", train_df["Date"].min(), "→", train_df["Date"].max())
print("Test date range:", test_df["Date"].min(), "→", test_df["Date"].max())

print(X_train.isnull().sum().sort_values(ascending=False).head(20))

from xgboost import XGBClassifier
from sklearn.metrics import classification_report

model = XGBClassifier(
    objective="multi:softprob",
    eval_metric="mlogloss",
    use_label_encoder=False,
    n_estimators=300,
    learning_rate=0.05,
    max_depth=2,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

model.fit(X_train, y_train)

import pandas as pd

importance = model.feature_importances_
feature_importance_df = pd.DataFrame({
    'Feature': selected_features,
    'Importance': importance
}).sort_values(by='Importance', ascending=False)

print(feature_importance_df.head(30))  # top 20

from sklearn.metrics import classification_report

print("Train Report:")
print(classification_report(y_train, model.predict(X_train)))

print("Test Report:")
print(classification_report(y_test, model.predict(X_test)))

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Dự đoán nhãn
y_pred = model.predict(X_test)

# Tạo ma trận nhầm lẫn
cm = confusion_matrix(y_test, y_pred, labels=[0, 1, 2])
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Win", "Draw", "Lose"])

# Vẽ ma trận
plt.figure(figsize=(6, 5))
disp.plot(cmap=plt.cm.Blues, values_format='d')
plt.title("Confusion Matrix - Multi-class (Win / Draw / Lose)")
plt.grid(False)
plt.show()

from sklearn.metrics import log_loss, brier_score_loss

y_prob = model.predict_proba(X_test)
print("Log Loss:", log_loss(y_test, y_prob))  # dùng để tối ưu mô hình

import numpy as np
from sklearn.metrics import log_loss

classes = [0, 1, 2]  # Win, Draw, Lose

for cls in classes:
    idx = (y_test == cls)
    y_true_bin = (y_test[idx] == cls).astype(int)
    y_pred_bin = y_prob[idx, cls]  # Lấy xác suất đúng lớp đó
    loss = log_loss(y_true_bin, y_pred_bin, labels=[0,1])
    print(f"🔍 Log Loss - Class {cls} ({['Win','Draw','Lose'][cls]}): {loss:.4f}")

from sklearn.calibration import calibration_curve
import matplotlib.pyplot as plt

# Đánh giá cho từng lớp (0: HomeWin, 1: Draw, 2: AwayWin)
for class_idx, label in enumerate(["Home Win", "Draw", "Away Win"]):
    prob_true, prob_pred = calibration_curve((y_test == class_idx).astype(int), y_prob[:, class_idx], n_bins=10)

    plt.plot(prob_pred, prob_true, marker='o', label=f"{label}")

plt.plot([0, 1], [0, 1], linestyle='--', color='gray', label='Perfect Calibration')
plt.xlabel("Mean predicted probability")
plt.ylabel("Fraction of positives")
plt.title("Reliability Curve (Calibration)")
plt.legend()
plt.grid(True)
plt.show()

import numpy as np
y_proba = model.predict_proba(X_test)

# Trung bình xác suất dự đoán cho mỗi lớp
print("Mean predicted probability per class:")
print(np.mean(y_proba, axis=0).round(2))

np.bincount(y_test) / len(y_test)

import numpy as np

y_proba = model.predict_proba(X_test)

# Tính max & min theo từng lớp (trục = 0 là từng cột tương ứng class)
max_probs = np.max(y_proba, axis=0)
min_probs = np.min(y_proba, axis=0)

print("🔼 Max predicted probability per class:", np.round(max_probs, 4))
print("🔽 Min predicted probability per class:", np.round(min_probs, 4))

import pandas as pd

proba_df = pd.DataFrame(model.predict_proba(X_test), columns=["HomeWin", "Draw", "AwayWin"])
proba_df["true_label"] = y_test.reset_index(drop=True)
proba_df["predicted"] = model.predict(X_test)

proba_df["HomeTeam"] = features_df.loc[X_test.index, "HomeTeam"].reset_index(drop=True)
proba_df["AwayTeam"] = features_df.loc[X_test.index, "AwayTeam"].reset_index(drop=True)
proba_df["Date"] = features_df.loc[X_test.index, "Date"].reset_index(drop=True)

man_city_matches = proba_df[
    (proba_df["HomeTeam"] == "Man City") | (proba_df["AwayTeam"] == "Man City")
]

# Chỉ hiện các cột cần xem
man_city_matches_display = man_city_matches[
    ["Date", "HomeTeam", "AwayTeam", "HomeWin", "Draw", "AwayWin", "true_label", "predicted"]
]
man_city_matches_display

"""### Dự đoán 1 trận đấu"""

match_day = {
    "HomeTeam": "Man United",
    "AwayTeam": "Aston Villa",
    "Date": "2025-05-25",
    "League": "Premier League",
    "LeagueCode": 1,
    "HomeRank": 16,
    "AwayRank": 5,
    "HomePoint":39,
    "AwayPoint": 66,
    "HomeDiff": -12,
    "AwayDiff": 9,
    "HomeGF": 44,
    "AwayGF": 58,
    "HomeGA": 54,
    "AwayGA": 51,

}

league_map = {
    1: df0,
    2: df1,
    3: df2,
    4: df3,
    5: df4
}

df = league_map.get(match_day["LeagueCode"], pd.DataFrame())

def get_team_past_matches(df, team_name, date, code, n=7):
    date = pd.to_datetime(date)
    past_matches = df[
        ((df["HomeTeam"] == team_name) | (df["AwayTeam"] == team_name)) &
        (df["Date"] < date) & (df["LeagueCode"] == code)
    ].sort_values("Date", ascending=False).head(n)
    return past_matches

home = get_team_past_matches(df, match_day["HomeTeam"], match_day["Date"], match_day["LeagueCode"])
away = get_team_past_matches(df, match_day["AwayTeam"], match_day["Date"], match_day["LeagueCode"])

hometeam = features(home)
awayteam = features(away)

hometeam = hometeam[hometeam["Team"] == match_day["HomeTeam"]].reset_index(drop=True)
awayteam = hometeam[awayteam["Team"] == match_day["AwayTeam"]].reset_index(drop=True)

hometeam

def extract_team_features(df, prefix="Home"):
    cols = [
        "GF", "GA", "Sh", "ShT", "Cn", "F", "YC", "RC",
        "Point", "Conv_rate", "ShT_ratio", "Win", "Draw", "Lose"
    ]

    rename = {
        "GF": "avg_gf", "GA": "avg_ga", "Sh": "avg_sh", "ShT": "avg_sht",
        "Cn": "avg_cn", "F": "F_avg", "YC": "YC_avg", "RC": "RC_avg",
        "Point": "point_avg", "Conv_rate": "conv_rate_avg",
        "ShT_ratio": "shT_ratio_avg", "Win": "win_avg",
        "Draw": "draw_avg", "Lose": "lose_avg"
    }

    avg = df[cols].mean().round(2).to_dict()

    return {f"{prefix}_{rename[k]}": v for k, v in avg.items()}

home_features = extract_team_features(hometeam, prefix="Home")
away_features = extract_team_features(awayteam, prefix="Away")

feature_row = {**home_features, **away_features}

feature_row

f = {
     'LeagueCode' : match_day['LeagueCode'],
     'HomeRank' :  match_day['HomeRank'],
     'AwayRank': match_day['AwayRank'],
     'HomePoint':  match_day['HomePoint'],
     'AwayPoint':  match_day['AwayPoint'],

     'HomeDiff': match_day['HomeDiff'],
     'AwayDiff': match_day['AwayDiff'],

      'HomeGF':match_day['HomeGF'],
      'AwayGF': match_day['AwayGF'],
      'HomeGA': match_day['HomeGA'],
      'AwayGA': match_day['AwayGA'],

      'Home_point_avg' : feature_row['Home_point_avg'] ,
      'Away_point_avg' : feature_row['Away_point_avg'],

       'Home_avg_gf' : feature_row['Home_avg_gf'],
       'Away_avg_gf' :  feature_row['Away_avg_gf'],
       'Home_avg_ga':  feature_row['Home_avg_ga'],
       'Away_avg_ga': feature_row['Away_avg_ga'],

       'Home_win_avg' : feature_row['Home_win_avg'] ,
       'Away_win_avg': feature_row['Home_win_avg'] ,

       'Home_lose_avg': feature_row['Home_lose_avg'] ,
      'Away_lose_avg': feature_row['Away_lose_avg'] ,

      'Home_draw_avg': feature_row['Home_draw_avg'] ,
       'Away_draw_avg': feature_row['Away_draw_avg'] ,

       'Home_avg_sh': feature_row['Home_avg_sh'] ,
        'Away_avg_sh': feature_row['Away_avg_sh'] ,

       'Home_avg_sht': feature_row['Home_avg_sht'] ,
       'Away_avg_sht': feature_row['Away_avg_sht'] ,

     'diff_point': match_day['HomePoint'] - match_day['AwayPoint'] ,
     'diff_rank':  match_day['HomeRank'] - match_day['AwayRank'] ,
     'diff_GD':  match_day['HomeDiff'] - match_day['AwayDiff'] ,
      'diff_GF':  match_day['HomeGF'] - match_day['AwayGF'] ,
      'diff_GA':  match_day['HomeGA'] - match_day['AwayGA'] ,

    'diff_Form': feature_row['Home_point_avg'] - feature_row['Away_point_avg'],
    'diff_Win': feature_row['Home_win_avg'] - feature_row['Away_win_avg'] ,
    'diff_Draw':  feature_row['Home_draw_avg'] - feature_row['Away_draw_avg'] ,
    'diff_Lose':  feature_row['Home_lose_avg'] - feature_row['Away_lose_avg'] ,
    'diff_gf':  feature_row['Home_avg_gf'] - feature_row['Away_avg_gf'],
    'diff_ga':  feature_row['Home_avg_ga'] - feature_row['Away_avg_ga'] ,
    'diff_sh':  feature_row['Home_avg_sh'] - feature_row['Away_avg_sh'],
    'diff_sht':  feature_row['Home_avg_sht'] - feature_row['Away_avg_sht'] ,

}
f['draw_score'] = sum([
    abs(f["diff_rank"]) <= 6,
    abs(f["diff_point"]) <= 6,
    abs(f["diff_GD"]) <= 15,
    abs(f["diff_GA"]) <= 10,
    abs(f["diff_GF"]) <= 10,
    abs(f["diff_Form"]) <= 0.6,
    abs(f["diff_Win"]) <= 0.25,
    abs(f["diff_Lose"]) <= 0.25,
    abs(f["diff_gf"]) <= 1.5,
    abs(f["diff_ga"]) <= 1.5,
    abs(f["diff_sh"]) <= 4,
    abs(f["diff_sht"]) <= 2
]) / 12

X_input = pd.DataFrame([f])[selected_features]

probs = model.predict_proba(X_input)[0]

print(" Dự đoán xác suất trận:")
print(f" Đội nhà thắng : {probs[0]*100:.2f}%")
print(f" Hòa           : {probs[1]*100:.2f}%")
print(f" Đội khách thắng: {probs[2]*100:.2f}%")