# -*- coding: utf-8 -*-
"""FootballPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tnlRSCSe8riF8X2NOGAjk5sYah5fHD6f
"""

# import các thư viện cơ bản
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

#df = pd.read_csv('Matches.csv')
df0 = pd.read_csv('PL.csv')
df1 = pd.read_csv('LL.csv')
df2 = pd.read_csv('B.csv')
df3= pd.read_csv('S.csv')
df4 = pd.read_csv('L1.csv')

df0["LeagueCode"] = 0
df1["LeagueCode"] = 1
df2["LeagueCode"] = 2
df3["LeagueCode"] = 3
df4["LeagueCode"] = 4

df_all = pd.concat([df0, df1, df2, df3, df4], ignore_index=True)

home_teams = set(df0["HomeTeam"].unique())
away_teams = set(df0["AwayTeam"].unique())

all_teams = sorted(home_teams.union(away_teams))
print(f"Tổng số đội bóng duy nhất: {len(all_teams)}")
for team in all_teams:
    print(team)

df_all.head()

print(f"Số trận đấu : {df_all.shape[0]}")

print(f"Số trận đấu Premier League: {df0.shape[0]}")
print(f"Số trận đấu Laliga: {df1.shape[0]}")
print(f"Số trận đấu Bundesliga: {df2.shape[0]}")
print(f"Số trận đấu Serie A: {df3.shape[0]}")
print(f"Số trận đấu Ligue 1: {df4.shape[0]}")

missing_rows = df_all[df_all.isnull().any(axis=1)]
print(f"Số dòng bị thiếu dữ liệu: {len(missing_rows)}")
missing_rows[['Date','Div','HomeTeam','AwayTeam',]].head()

for df in [df0, df1, df2, df3, df4]:
    missing_rows = df[df.isnull().any(axis=1)]
    print(f"Số dòng bị thiếu dữ liệu: {len(missing_rows)}")
    missing_rows[['Date','Div','HomeTeam','AwayTeam',]].head()

df_all = df_all.dropna().reset_index(drop=True)

# df0 = df0.dropna().reset_index(drop=True)
# df1 = df1.dropna().reset_index(drop=True)
df2 = df2.dropna().reset_index(drop=True)
df3 = df3.dropna().reset_index(drop=True)
df4 = df4.dropna().reset_index(drop=True)

from dateutil import parser

df_all['Date'] = df_all['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
invalid_dates = df_all[df_all['Date'].isnull()]
print(f'Số dòng lỗi định dạng ngày: {len(invalid_dates)}')

from dateutil import parser

df0['Date'] = df0['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
df1['Date'] = df1['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
df2['Date'] = df2['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
df3['Date'] = df3['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)
df4['Date'] = df4['Date'].apply(lambda x: parser.parse(str(x), dayfirst=True) if pd.notnull(x) else None)

for df in [df0, df1, df2, df3, df4]:
    # Kiểm tra dòng nào bị lỗi khi chuyển ngày
    invalid_dates = df[df['Date'].isnull()]
    print(f'Số dòng lỗi định dạng ngày: {len(invalid_dates)}')

df_all = df_all.sort_values(by='Date').reset_index(drop=True)

df0 = df0.sort_values(by='Date').reset_index(drop=True)
df1 = df1.sort_values(by='Date').reset_index(drop=True)
df2 = df2.sort_values(by='Date').reset_index(drop=True)
df3 = df3.sort_values(by='Date').reset_index(drop=True)
df4 = df4.sort_values(by='Date').reset_index(drop=True)

df_all[((df_all["HomeTeam"]=="Real Madrid") | (df_all["AwayTeam"]=="Real Madrid")) & (df_all["Date"]>="2018-08-13")].head(10)

print(f"\n⚽Thống kê kết quả FTR:")
print(df_all["FTR"].value_counts())

dfs = [df0, df1, df2, df3, df4]
names = ["Premier League", "La Liga", "Bundesliga", "Serie A", "Ligue 1"]

for i, df in enumerate(dfs):
    print(f"\n⚽ {names[i]} - Thống kê kết quả FTR:")
    print(df["FTR"].value_counts())

df_all["FTR"] = df_all["FTR"].map({"H": 0, "D": 1, "A": 2})

df_all["Season"]= df_all["Date"].dt.year

#Mã hóa cột kết quả trận đấu
df0["FTR"] = df0["FTR"].map({"H": 0, "D": 1, "A": 2})
df1["FTR"] = df1["FTR"].map({"H": 0, "D": 1, "A": 2})
df2["FTR"] = df2["FTR"].map({"H": 0, "D": 1, "A": 2})
df3["FTR"] = df3["FTR"].map({"H": 0, "D": 1, "A": 2})
df4["FTR"] = df4["FTR"].map({"H": 0, "D": 1, "A": 2})

"""Lọc đặc trưng

"""

def features(df):
    df = df.copy()
    #lọc ra các trận thuộc sân nhà
    home = df[[ "Date", "HomeTeam",  "FTHG", "FTAG", "HS", "HST","HC"]].copy()
    home.columns = [ "Date", "Team" , "GF", "GA", "Sh", "ShT","Cn"]

    home["Point"] = df["FTR"].map({0: 3, 1: 1, 2: 0})
    home["Conv_rate"] = np.where(df["AS"] == 0, 0, df["FTAG"] / df["AS"])
    home["Win"] = df["FTR"].map({0: 1, 1: 0, 2: 0})
    home["Draw"] = df["FTR"].map({0: 0, 1: 1, 2: 0})
    home["Lose"] = df["FTR"].map({0: 0, 1: 0, 2: 1})

    #lọc ra các trận thuộc sân khách
    away = df[[ "Date", "AwayTeam", "FTAG", "FTHG", "AS","AST","AC"]].copy ()
    away.columns = [ "Date", "Team", "GF", "GA","Sh", "ShT" ,"Cn"]
    away["Point"] = df["FTR"].map({0: 0, 1: 1, 2: 3})
    away["Conv_rate"] = np.where(df["AS"] == 0, 0, df["FTAG"] / df["AS"])
    away["Win"] = df["FTR"].map({0: 0, 1: 0, 2: 1})
    away["Draw"] = df["FTR"].map({0: 0, 1: 1, 2: 0})
    away["Lose"] = df["FTR"].map({0: 1, 1: 0, 2: 0})

    #gộp lại theo cột
    team_matches = pd.concat([home, away])
    team_matches = team_matches.sort_values("Date")
    return team_matches

team = features(df0)
team[team["Team"]=="Man City"].head(10)

def rolling_averages(group, cols, new_cols):
    group = group.sort_values("Date")
    rolling_stats = group[cols].rolling(7, closed='left').mean()
    group[new_cols] = rolling_stats
    return group

cols = ["GF", "GA", "Point", "Sh", "ShT",	"Conv_rate", "Win", "Draw","Lose","Cn"]
new_cols = [f"{c}_avg" for c in cols]

def apply_rolling(team_matches):
    team_matches = team_matches.groupby("Team").apply(rolling_averages, cols, new_cols=new_cols)
    return team_matches.reset_index(drop=True)

team = apply_rolling(team);
team[team["Team"]=="Man City"].head(20)

selected_cols = ["Team", "Date","GF_avg", "GA_avg", "Point_avg", "Sh_avg", "ShT_avg",	"Conv_rate_avg", "Cn_avg","Win_avg", "Draw_avg","Lose_avg"]
def select_cols(team_matches):
    team_matches = team_matches[selected_cols]
    return team_matches

team = select_cols(team);
team[team["Team"]=="Man City"].head(20)

def merge_back(df, team_matches):
    df = df.merge(
        team_matches.rename(columns={
            "Team": "HomeTeam",
            "Date": "Date",
            "Point_avg": "Home_point_avg",
            "GF_avg": "Home_avg_gf",
            "GA_avg": "Home_avg_ga",
            "Sh_avg": "Home_avg_sh",
            "ShT_avg": "Home_avg_sht",
            "Cn_avg": "Home_avg_cn",
            "Conv_rate_avg": "Home_conv_rate_avg",
            "Win_avg": "Home_win_avg",
            "Draw_avg": "Home_draw_avg",
            "Lose_avg": "Home_lose_avg"
        }),
        on=["Date", "HomeTeam"],
        how="left"
    )
    df = df.merge(
    team_matches.rename(columns={
        "Team": "AwayTeam",
        "Date": "Date",
        "Point_avg": "Away_point_avg",
        "GF_avg": "Away_avg_gf",
        "GA_avg": "Away_avg_ga",
        "Sh_avg": "Away_avg_sh",
        "ShT_avg": "Away_avg_sht",
        "Cn_avg": "Away_avg_cn",
        "Conv_rate_avg": "Away_conv_rate_avg",
        "Win_avg": "Away_win_avg",
        "Draw_avg": "Away_draw_avg",
        "Lose_avg": "Away_lose_avg"
    }),
    on=["Date", "AwayTeam"],
    how="left"
    )
    #df = df.sort_values("Date")
    return df

df0 = merge_back(df0,team)

print(df0.isnull().sum().sort_values(ascending=False))

df_all[(df_all["HomeTeam"]=="Man City") | (df_all["AwayTeam"]=="Man City")].head(10)

rolling_cols = [col for col in df0.columns if "_avg" in col]
df0 = df0.dropna(subset=rolling_cols)

def generate_features(df):
    team_matches =  features(df)
    team_matches = apply_rolling(team_matches)
    team_matches = select_cols(team_matches)
    df = merge_back(df, team_matches)
    return df

df0 = generate_features(df0)
  df1 = generate_features(df1)
  df2 = generate_features(df2)
  df3 = generate_features(df3)
  df4 = generate_features(df4)

def tinh_dac_trung(df):
    # 1. Phong độ tổng quát
    df["diff_point"] = df["HomePoints"] - df["AwayPoints"]
    df["diff_rank"] = df["HomeRank"] - df["AwayRank"]
    df["rank_gap"] = abs(df["diff_rank"])

    # 2. Phong độ gần đây
    df["diff_point_avg_5"] = df["Home_point_avg"] - df["Away_point_avg"]
    df["diff_Win"]  = df["Home_win_avg"] - df["Away_win_avg"]
    df["diff_Lose"] = df["Home_lose_avg"] - df["Away_lose_avg"]
    df["diff_Draw"] = df["Home_draw_avg"] - df["Away_draw_avg"]

    # 3. Tấn công – phòng ngự
    df["diff_gf"] = df["Home_avg_gf"] - df["Away_avg_gf"]
    df["diff_ga"] = df["Home_avg_ga"] - df["Away_avg_ga"]
    df["diff_sh"] = df["Home_avg_sh"] - df["Away_avg_sh"]
    df["diff_sht"] = df["Home_avg_sht"] - df["Away_avg_sht"]
    df["diff_conv_avg"] = df["Home_conv_rate_avg"] - df["Away_conv_rate_avg"]

    df["draw_tendency"] = (df["Home_draw_avg"] + df["Away_draw_avg"]) / 2

    df["diff_f88"]  = df["B365H"] - df["B365A"]

    df["is_draw_like"] = (
        (df["rank_gap"] <= 8) &  # dễ hòa khi không quá lệch
        (abs(df["diff_point_avg_5"]) <= 2) &  # hai đội phong độ gần gần nhau
        (abs(df["diff_Win"]) <= 0.25) &
        (abs(df["diff_Lose"]) <= 0.25) &
        (df["draw_tendency"] >= 0.15)  # cả hai có xu hướng hòa nhẹ
    ).astype(int)


    return df

dt = tinh_dac_trung(df0)
   #dt = tinh_dac_trung(df_all)
  #df1 = tinh_dac_trung(df1)
  # df2 = tinh_dac_trung(df2)
  # df3 = tinh_dac_trung(df3)
  # df4 = tinh_dac_trung(df4)

# 1. Chuẩn bị bảng đặc trưng đã tính
# features_df =  dt[["HomePoints","AwayPoints","diff_point",
#                   "Home_win_avg","Away_win_avg","diff_Win",
#                   "Home_point_avg","Away_point_avg","diff_point_avg_5",
#                   "Home_lose_avg","Away_lose_avg","diff_Lose",
#                   "Home_draw_avg","Away_draw_avg","diff_Draw",
#                   "Home_avg_gf","Away_avg_gf","diff_gf",
#                   "Home_avg_ga","Away_avg_ga","diff_ga",
#                   "Home_avg_sh","Away_avg_sh","diff_sh",
#                   "Home_avg_sht","Away_avg_sht","diff_sht",
#                   "Home_conv_rate_avg","Away_conv_rate_avg","diff_conv_avg",
#                   "draw_tendency",
#                   "rank_gap","diff_rank",
#                   "B365H","B365A","B365D","diff_f88",
#                   "is_draw_like",
#                   "FTR"
#                   ]]


features_df = dt.copy()



features_df.head()

# Chọn các đặc trưng số đã tính (lọc bớt cột text, ngày tháng...)
numerical_cols = features_df.select_dtypes(include=['float64', 'int64']).columns

# Tính tương quan với FTR_num
correlations = features_df[numerical_cols].corr()['FTR'].drop(['FTR']).sort_values(key=abs, ascending=False)

# Hiển thị top 15 đặc trưng ảnh hưởng nhiều nhất
print(correlations.head(50))

selected_features = [
    # Phong độ tổng quát
    "LeagueCode",
    "diff_rank",
    "diff_point_avg_5",
    "diff_Win",
    "diff_Lose",
    #"draw_tendency",
    "diff_Draw",
    #"diff_f88",

    # Tấn công – phòng ngự
    "diff_gf",
    "diff_ga",
    "diff_sht",
    "diff_conv_avg",

    # Nhận diện trận hòa
     "is_draw_like"
]

# Đảm bảo Date là datetime
features_df["Date"] = pd.to_datetime(features_df["Date"])

# Chia theo thời gian thực tế28/05/2023 19/05/2024
train_df = features_df[features_df["Date"] < "2024-06-30"]

test_df  = features_df[features_df["Date"] > "2024-06-30"]

# Tách feature và label
X_train, y_train = train_df[selected_features], train_df["FTR"]
X_test, y_test   = test_df[selected_features],  test_df["FTR"]

print(X_train.isnull().sum().sort_values(ascending=False).head(10))

from xgboost import XGBClassifier
from sklearn.metrics import classification_report
from imblearn.over_sampling import SMOTE

# ⚠️ Dùng tập đã chia theo thời gian: X_train, y_train, X_val, y_val, X_test, y_test

# 1. Cân bằng class bằng SMOTE cho tập huấn luyện
sm = SMOTE(random_state=42)
X_train_bal, y_train_bal = sm.fit_resample(X_train, y_train)

# 2. Khởi tạo và train mô hình
model = XGBClassifier(
    objective="multi:softprob",  # Cho ra xác suất nhiều lớp
    eval_metric="mlogloss",      # Log loss cho đa lớp
    use_label_encoder=False,     # Tránh warning
    n_estimators=200,
    max_depth=4,
    learning_rate=0.07,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)
model.fit(X_train_bal, y_train_bal)

# 4. Đánh giá cuối cùng trên tập test
print(" Evaluation on TEST set:")
y_test_pred = model.predict(X_test)
print(classification_report(y_test, y_test_pred))

import matplotlib.pyplot as plt
from xgboost import plot_importance

plot_importance(model, max_num_features=20)
plt.show()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Tạo ma trận nhầm lẫn
cm = confusion_matrix(y_test, y_test_pred)

# In ma trận
labels = ["Home Win", "Draw", "Away Win"]
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix on Test Set")
plt.show()

from sklearn.metrics import log_loss, brier_score_loss

print("Log loss:", log_loss(y_test, model.predict_proba(X_test)))

import pandas as pd

proba_df = pd.DataFrame(model.predict_proba(X_test), columns=["Đội nhà thắng", "Hoà", "đội khách thắng"])
proba_df["true_label"] = y_test.reset_index(drop=True)
proba_df["predicted"] = model.predict(X_test)

proba_df.head(30)

import joblib

joblib.dump(model, "model/xgb_model.pkl")